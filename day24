#!/usr/bin/awk -f
BEGIN { FS = "" }

function print_level(time) {
    printf("#.")

    for (j = 0; j < width; j++) { printf("#") }

    print ""

    for (l = 0; l < height; l++) {
        printf("#")

        for (i = 0; i < width; i++)
        if (l in level[time] && i in level[time][l]) {
            if (level_cnt[time][l][i] == 1) {
                printf(enemy_type[level[time][l][i][0]])
            }
            else { printf(level_cnt[time][l][i]) }
        }
        else { printf(".") }

        print "#"
    }

    for (j = 0; j < width; j++) { printf("#") }

    printf(".#")
    print ""
}

function print_level_over_time() {
    for (t in level) {
        print "level at time " t
        print_level(t)
        print ""
    }
}

function init_level(l, i, c) {
    if (c != ".") {
        identifier = l ":" i
        enemy_type[identifier] = c
        level[0][l][i][level_cnt[0][l][i]++] = identifier
    }
}

function simulate_enemies(time_horizon) {
    for (t = 0; t < time_horizon; t++) {
        for (l in level[t]) {
            for (i in level[t][l]) {
                for (e in level[t][l][i]) {
                    if (enemy_type[level[t][l][i][e]] == "v") {
                        next_l = l + 1
                        next_i = i
                    }
                    else if (enemy_type[level[t][l][i][e]] == "^") {
                        next_l = l - 1
                        next_i = i
                    }
                    else if (enemy_type[level[t][l][i][e]] == "<") {
                        next_l = l
                        next_i = i - 1
                    }
                    else if (enemy_type[level[t][l][i][e]] == ">") {
                        next_l = l
                        next_i = i + 1
                    }
                    else { print "ERROR" }

                    next_i += width
                    next_i %= width
                    next_l += height
                    next_l %= height

                    level[t + 1][next_l][next_i][\
                        level_cnt[t + 1][next_l][next_i]++\
                    ] = level[t][l][i][e]
                }
            }
        }
    }
}

!/#.#/ {
    for (i = 1; i < NF - 1; i++) { init_level(NR - 2, i - 1, $(i + 1)) }

    width = NF - 2
    height = NR - 1
}

function least_common_multiple(w, h) {
    common_multiple = w

    while (common_multiple % h != 0) { common_multiple += w }

    return common_multiple
}

function recure_path(time, line, i) {
    #print time " " line " " i

    if (\
        !(time % time_repeats_after in shortest_path) ||
        !(line in shortest_path[time % time_repeats_after]) ||
        !(i in shortest_path[time % time_repeats_after][line]) ||
        (shortest_path[time % time_repeats_after][line][i] > time)\
    ) {
        if (\
            !(time % time_repeats_after in shortest_path) ||
            !(line in shortest_path[time % time_repeats_after]) ||
            !(i in shortest_path[time % time_repeats_after][line])\
        ) shortest_path_cnt++

        shortest_path[time % time_repeats_after][line][i] = time

        # print\
        #     "shortest path to " time % time_repeats_after " " line " " i " : "\
        #         time\
        #         "    "\
        #         shortest_path_cnt\
        #         "/"\
        #         time_repeats_after * width * height\
        #         "    "\
        #         shortest_path_cnt / time_repeats_after / width / height
    }
    else {
        # already visited before
        #print "already visited"
        return
    }

    if (line == goal_line && i == goal_i) {
        # goal found. Update time to goal
        #print "goal found "
        timer = time - 1
        return
    }

    if (time > timer) {
        # has reached goal in better time before
        #print "out of time"
        return
    }

    if (line < 0 || line >= height || i < 0 || i >= width) {
        if (line != -1 || i != 0) {
            if (line != height || i != width - 1) {
                #out of bounds
                return
            }
        }
    }

    if (level_cnt[time % time_repeats_after][line][i] != 0) {
        # eaten by enemy
        #print "eaten by enemy"
        return
    }

    if(forward==1){
    recure_path(time + 1, line + 1, i)
    recure_path(time + 1, line, i + 1)}
    recure_path(time + 1, line - 1, i)
    recure_path(time + 1, line, i - 1)
    if(forward!=1){
    recure_path(time + 1, line + 1, i)
    recure_path(time + 1, line, i + 1)}
    recure_path(time + 1, line, i)
}

END {
    time_repeats_after = least_common_multiple(width, height)
    # print "level has width " width " and height " height
    # print "time_horizon " time_repeats_after
    simulate_enemies(time_repeats_after - 1)
    forward=1
    timer = 35000
    goal_line = height
    goal_i = width - 1
    recure_path(0, -1, 0)
    shortest = timer + 1
    print shortest
    shortest_path_cnt = 0
    delete shortest_path
    forward=0
    timer = 35000
    goal_line = -1
    goal_i = 0
    recure_path(shortest, height, width - 1)
    shortest = timer + 1
    # print "found best path back " shortest
    shortest_path_cnt = 0
    delete shortest_path
    forward=1
    timer = 35000
    goal_line = height
    goal_i = width-1
    recure_path(shortest, -1, 0)
    shortest = timer + 1
    print shortest
    shortest_path_cnt = 0
    delete shortest_path
    #print_level_over_time()
}
