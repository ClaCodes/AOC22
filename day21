#!/usr/bin/awk -f
BEGIN { FS = "[ :]" }

{
    if ($4 == "") { num_initial[$1] = int($3) }
    else {
        operand1[$1] = $3
        operation[$1] = $4
        operand2[$1] = $5
    }

    #print $1 "   " $3 "  " $4 "   " $5
}

function solve(monkey, human, term) {
    # print "trying to solve for " human " in " monkey " = " term
    if (monkey == human) return term

    if (operation[monkey] == "+") {
        if (first_simplified[monkey] == 0) {
            return solve(operand2[monkey], human, term - num[operand1[monkey]])
        }
        else { return solve(operand1[monkey], human, term - num[operand2[monkey]]) }
    }
    else if (operation[monkey] == "-") {
        if (first_simplified[monkey] == 0) {
            return solve(operand2[monkey], human, num[operand1[monkey]] - term)
        }
        else { return solve(operand1[monkey], human, term + num[operand2[monkey]]) }
    }
    else if (operation[monkey] == "*") {
        if (first_simplified[monkey] == 0) {
            return solve(operand2[monkey], human, term / num[operand1[monkey]])
        }
        else { return solve(operand1[monkey], human, term / num[operand2[monkey]]) }
    }
    else if (operation[monkey] == "/") {
        if (first_simplified[monkey] == 0) {
            return solve(operand2[monkey], human, num[operand1[monkey]] / term)
        }
        else { return solve(operand1[monkey], human, term * num[operand2[monkey]]) }

        }
    else { print "ERROR" }
}

function try_simplify(monkey) {
    if (monkey in num) {
        # print "already know " monkey " as " num[monkey]

        return
    }

    if (!(monkey in operation)) { return -1 }

    first_simplified[monkey] = try_simplify(operand1[monkey])
    second_simplified[monkey] = try_simplify(operand2[monkey])

    if (first_simplified[monkey] != 0) { return -1 }
    else if (second_simplified[monkey] != 0) { return -1 }

    if (operation[monkey] == "+") {
        num[monkey] = num[operand1[monkey]] + num[operand2[monkey]]
        # print "new " monkey " as " num[monkey]
    }
    else if (operation[monkey] == "-") {
        num[monkey] = num[operand1[monkey]] - num[operand2[monkey]]
        # print "new " monkey " as " num[monkey]
    }
    else if (operation[monkey] == "*") {
        num[monkey] = num[operand1[monkey]] * num[operand2[monkey]]
        # print "new " monkey " as " num[monkey]
    }
    else if (operation[monkey] == "/") {
        num[monkey] = num[operand1[monkey]] / num[operand2[monkey]]
        # print "new " monkey " as " num[monkey]
    }
    else { print "ERROR" }

    return 0
}

function init_nums() {
    for (m in num_initial) {
        # print m " has " num_initial[m]
        num[m] = num_initial[m]
    }
}

END {
    #for (m in operand1) {
    #    print\
    #        m " has operation " operation[m] " with operands " operand1[m]\
    #            " and "\
    #            operand2[m]
    #}

    init_nums()
    s = try_simplify("root")
    # print "result of simplification was possible: " s
    print num["root"]
    delete num
    init_nums()
    delete num["humn"]
    delete operation["humn"]
    delete operand1["humn"]
    delete operand2["humn"]
    operation["root"] = "-"
    #s = try_simplify("pppw")
    #s = try_simplify("sjmn")
    s = try_simplify("root")
    # print "result of simplification was possible: " s
    sol = solve("root", "humn", 0)
    print sol
}
