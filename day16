#!/usr/bin/awk -f
BEGIN {
    FS = "[ ,;=]"
    verbose = 0
}

{
    for (i = 12; i <= NF; i += 2) { adjacent[$2][a_cnt[$2]++] = $i }

    flow_rate[$2] = $6

    if (flow_rate[$2] > 0) { valve[$2] = flow_rate[$2] }
}

# function distances_from(origin, loop_point) {
#     for (i in adjacent[loop_point]) {
#         to = adjacent[loop_point][i]

#         if (\
#             !(to in distance[origin]) ||
#             distance[origin][to] > distance[origin][loop_point] + 1\
#         ) {
#             distance[origin][to] = distance[origin][loop_point] + 1
#             distances_from(origin, to)
#         }
#     }
# }

# function all_distances() {
#     for (i in flow_rate) {
#         distance[i][i] = 0
#         distances_from(i, i)
#     }
# }


# function gen_comb(lastH, timeH, previous_flow, kj) {
#     for (kj in valve) {
#         if (!(kj in visited) || visited[kj] == 0) {
#             visited[kj] = 1

#             timer = timeH - distance[lastH][kj] - 1

#             if (timer > 0) {
#                 flow = previous_flow + valve[kj] * timer
#                 if (flow > best_flow) { best_flow = flow }
#                 gen_comb(lastH, timer, flow)
#             }

#             visited[kj] = 0
#         }
#     }
# }

# function gen_combB(lastH, lastE, timeH, timeE, previous_flow, only_ele, kj) {
#     for (kj in valve) {
#         if (!(kj in visited) || visited[kj] == 0) {
#             visited[kj] = 1

#             if (only_ele == 0) {
#                 timer = timeH - distance[lastH][kj] - 1

#                 if (timer >= 0) {
#                     flow = previous_flow + valve[kj] * timer
#                     if (flow > best_flowB) { best_flowB = flow }
#                     gen_combB(kj, lastE, timer, timeE, flow, 0)
#                 }
#             }

#             timer = timeE - distance[lastE][kj] - 1

#             if (timer >= 0) {
#                 flow = previous_flow + valve[kj] * timer
#                 if (flow > best_flowB) { best_flowB = flow }
#                 gen_combB(lastH, kj, timeH, timer, flow, 1)
#             }

#             visited[kj] = 0
#         }
#     }

#     if (verbose == 1)
#         printf(\
#             "All done with Hum %3s:%2d    Ele %3s:%2d   Best:%5d\n",
#             lastH,
#             timeH,
#             lastE,
#             timeE,
#             best_flowB\
#         )
# }
# function maximum_achievable(time_remaining, total_flow) {
#     # How much steam can be released in remaining time
#     # given some simplifying assumption
# }

# # todo: make algorithm greedy-> the maximum_achievable upper bound does more
# # work

# function gen_comb(laststep, time_remaining, total_flow2, i) {
#     for (i in valve) {
#         if (!(i in visited) || visited[i] == 0) {
#             timer = time_remaining - distance[laststep][i] - 1
#             if (timer < 0) { timer = 0 }
#             total_flow3 = total_flow2 + valve[i] * timer
#             if (total_flow3 > best_flow) { best_flow = total_flow3 }
#             if(timer > 0 ) {
#                 visited[i] = 1
#                 gen_comb(i, timer, total_flow3)
#                 visited[i] = 0
#             }
#         }
#     }
# }

function print_hist(i, p) {
    if (i < 1) return
    printf(" previous[%2d][%2s]=%2s,", i, p, previous[i][p])
    print_hist(i-1, previous[i][p])
}

function can_be_opened(i, p, p2) {
    if (i <= 1) return 1
    if (previous[i][p] == p && p == p2) {
        return 0
    }
    return can_be_opened(i-1, previous[i][p], p2)
}

function update_flow_if_better(i, n, current_flow, pre) {
    if (!(i in flow) || !(n in flow[i]) || flow[i][n] < current_flow) {
        flow[i][n] = current_flow
        previous[i][n] = pre
    }
}

function solve_A() {
    flow[0]["AA"] = 0
    for (i = 1; i<30; ++i ) {
        for (p in flow[i-1] ){
            current_flow = flow[i-1][p]
            for (n in adjacent[p]){
                a = adjacent[p][n]
                update_flow_if_better(i, a, current_flow, p)
            }
            if (can_be_opened(i-1, p, p) == 1) {
                update_flow_if_better(i, p, current_flow + (30-i)*valve[p], p)
            }
        }
    }
    best = 0
    for (p in flow[29]) {
        if (flow[29][p] > best) {
            best = flow[29][p]
            bestp = p
        }
    }
    # printf("flow[%2d][%2s]=%5d     ", 29, bestp, flow[29][bestp])
    # print_hist(29, bestp)
    print " "
    print best

}

END {
    if (1) {
        solve_A()
    } else {

    all_distances()
    visited["AA"] = 1
    gen_comb("AA", 30, 0)
    print best_flow
}
    # gen_combB("AA", "AA", 26, 26, 0, 0)
    # print best_flowB
}
