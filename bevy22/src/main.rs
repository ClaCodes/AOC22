use bevy::{color::palettes::css::*, prelude::*};
use bevy_inspector_egui::quick::WorldInspectorPlugin;
use image::{Rgb, RgbImage};
use std::f32::consts::PI;

const INPUTEX: &str = "        ...#
        .#..
        #...
        ....
...#.......#
........#...
..#....#....
..........#.
        ...#....
        .....#..
        .#......
        ......#.";
const INPUTEX2: &str = "10R5L5R10L4R5L5";
const actions: &'static[Action] = &[
    Action::Step(10),
    Action::Rot(RotDir::Clock),
    Action::Step(5),
    Action::Rot(RotDir::CounterClock),
    Action::Step(5),
    Action::Rot(RotDir::Clock),
    Action::Step(10),
    Action::Rot(RotDir::CounterClock),
    Action::Step(4),
    Action::Rot(RotDir::Clock),
    Action::Step(5),
    Action::Rot(RotDir::CounterClock),
    Action::Step(5),
];
const MYINPUT: &str = "                                                  .........................................#.....#...........#........#.#.....#..#..#.#............#.#
                                                  ..#............##.#..........#......#.........#.......#..........#...#.#............................
                                                  .........#.....#......................#...#.....#........#..#..........#................##..........
                                                  ............#.......#..#......#......................#.....#...##..........#........................
                                                  ............#...................................##..#......#..#...................#..#....#.........
                                                  .#.................#...#....................#......#....#.#.........#.......#...............#.......
                                                  .....#.#.............#.........................#.#.....#.#....#...#................#........#.......
                                                  .......................#...........###.............#..#.............#....#........................#.
                                                  ......#.#...........#..........#..........#.....#...........#.......#.#...........#...#.............
                                                  ...................#...................#...............#..#....#................#....#............#.
                                                  ......#...........#......#........#...........................#....#.....#...#.#....................
                                                  ................#.............#..........#..#...##...........#.#.......##..#...........#.#..........
                                                  ..........#...#............#...#...#......#......#..................................................
                                                  ...#........................#................#..........#..............#..........#........#........
                                                  ...#....###...#...........#....#.........###...................##..........................##..#....
                                                  .......................#............#.##............................................................
                                                  ..#...................#.............#.........#.......................#........##...#........##..##.
                                                  ..#.......#..#.##.........#....#.........................#...#........#.#....###............#.......
                                                  ................#..#..........##.#............#.......#.......#.#................#....#.............
                                                  ..#........................#...#....#....#.....##................#....#...............#..#...#....#.
                                                  ............#..###.................................#......#....#......#..........#...........#......
                                                  ...#.#.#.#.........#...........#.....##..#..#.............#.........##........#............#.....#..
                                                  ..........#...........#..#....#.#...#.....................#.........#.....#..................#..#...
                                                  ..#.........#....#...........#...........#........##.............#...#..#.#.#.......#...........#...
                                                  ...........#........#...........#.#......................................#..........#..............#
                                                  ....#...................#............#.............#....#..###...#..................................
                                                  .#.......#.......................#..#...........................................#...................
                                                  ...............#......................#....#........................#......................#........
                                                  .#.............##............#....#.......#..........#.#..#...#........#....#........#...#....#.....
                                                  ...#.........#....#....................#...............................#....#..........#....#...#...
                                                  .......##............................#....#...................#.....#.....##............#.......#...
                                                  .......#............#..#.....#.....#...#..............#....................#.......#.........#.#....
                                                  ..................###..#..#.........#....#..#...................#.........................#.........
                                                  ..................#.....#....#........#.#..........#........#.#.............##.......#.........#....
                                                  ....#...#.#.#.................#................#.#................#...##................#...........
                                                  #.........#........................#...#........#...........................#.#.................##..
                                                  .......#.....#..#......#...#......#............#...............#..#...............#...##............
                                                  .....................#.#......#.#...............#.#..#...........##..................#.#...#.#......
                                                  ..#........#....#........#...#.................#....#...........#..#...#.....#.................#..#.
                                                  ................#...........##..#........#............#....#....#..#.#....#........#................
                                                  .........#..#.....................#........#.......#...................#.....#.............#........
                                                  ............#..........................#.............#........#..#............#.....................
                                                  ..#........#.................#....................##..............................#.................
                                                  ...###......#.........#.......#..............#........#....#......#....##........#...#......##...#..
                                                  ............................#..#.................##..............#.......#..........#.......#......#
                                                  ##.......#.....................................##.............##..#............#.......#......#.....
                                                  .#..#.......##...............#.............#............#....#.....................#................
                                                  ................#...#..........#.....#.#........................#.#..............#.......#...#......
                                                  ............#.#........................#.#..........#...........#..............#......#...##........
                                                  ..............#..#.....................##..................#......#...............##................
                                                  ...#......#....#..............#....#.....#.#......
                                                  ##.....#................#......#....#.......#.....
                                                  ##...........#.......#.....#......#....#...#.#...#
                                                  .#.#...#....#.#........................##......#.#
                                                  .............#........#.........#.......#..#......
                                                  .....#..........#.#......#..#.....#.........#.....
                                                  ....#................#...............#....#.#.....
                                                  ..#.#..#....#...........#.........................
                                                  ..#...#...........#.##...............#.........#.#
                                                  ......#..........#...#.......#.#.#...........#....
                                                  ..##....#..#...#.#.#..................#...........
                                                  ..................................................
                                                  .........#........#.........#...#.................
                                                  ........................#..#....#.....##.#.....#..
                                                  ................#..#.......#......................
                                                  ..............#.......#.....#.....................
                                                  #....#............................................
                                                  ......#....#...#...#.............................#
                                                  .....................#.........#..........#.##....
                                                  ...............#..#.......................#..#....
                                                  ................#....#...........#.........##.....
                                                  ...........##....##.....#.......................#.
                                                  .#.....................#.............#............
                                                  #.......#..#.......#..............................
                                                  .............#..##....###.#...#......#...#........
                                                  ..#............#......................#...........
                                                  .....##....#...#.#..##..........#.....#.....#.....
                                                  ....................#.#.#...#.#...........#..#....
                                                  ...#..#....#......................#......#........
                                                  ..............#.....#.............##..#.....#.....
                                                  .#...#...........................#.#......#.......
                                                  ...................#........#.....................
                                                  .#....#.............#.............#.....#.#.......
                                                  ..#..#.................#.........#......#.........
                                                  .....#.##........................#..........#....#
                                                  ..#......................#.....................##.
                                                  ....#...#.......#........##......................#
                                                  ..#.........#.....#..................#..#.......#.
                                                  ..##.....#............##.........#...#............
                                                  ...#...............#.#......................##....
                                                  ............##...............#....................
                                                  ..........#.......................#...............
                                                  ...........#.......#..#............#..............
                                                  ..............#.....#...................#.........
                                                  .......#.#.......#..........#..#..................
                                                  .........#.......................#........#.......
                                                  ...........#.............#.................#......
                                                  .....#...................##.............#..#...#..
                                                  #........##....#..##.#............................
                                                  ...............#.#................................
....................#..#.............##...#......................##...#...........#...#..##.........
#......#.#......#.......##.....##.#................................#........#.............#.......#.
.....................#.#.................#..#..........##...........#.................#.............
.........#..##..........#...............#.......#.................#...............#......#......#...
.#...#.#..#............#...........#..........##...........................#...#....................
.............#...#............#...........#..##................#.#...........##......##..........#..
.....#....#....#...............#......#...#.........##................#.#..........................#
...#............................#.##...........#.....#...#....###..##.#......................#......
.#.#....#....#.................#.#...#.....#.#......................#...#.#.#....##.................
##.......#....#................##................................................#.........##.......
....#.................#.......................#.#.#.............#....#...#...#...................#..
...............#................................................#.........#.............#......#....
.#..#....................#..#..#.......##.............##...#....#...................#...#.#.##......
......#...........#............#......#...............................#.....##.......#.........#....
......#.#.....#.#............#......#................#........#.#.....#.#..#........#......##.......
.#.....##...#.......#.##......#........#..............................#.......#...#...#..#..........
.....................#...........................#..........#......#....#....#.........##...........
#..........#.#.#..........#.............###..#........#...#..............#...#.........#............
......#.#...........#...................#.......#..........................................#..#.....
...........###.#..........................##..........................................#.........#...
...#...#.........#.......#.................................#..................#................#...#
.....................##..#...#..............................................#..#..................#.
...#......#........#...#..#.#...............#..............#..............#.........#..##.......#...
...#..........#...#.........#........#...#...#.#...#.#......#...........#....#........#............#
........#.....................#............#.........................#......#.....#................#
.....................#....................#...###.#..............#......#........#........#.........
#.......#...#...........#........................................#..#...#...........................
............................#...............#....................#.........#......##..#...#.........
..........#...................#........................#..........................#..##..........#..
#........#.....#..#...#........##.........................#....#..............#................##...
#.......................................#.........#.#...#..#..........................#.............
..#....#..#..#........#......#.........#...................................#....#.........#..#......
.......#.................#......#...#...#...#...........#.#..#..................#..##...............
..................#...#...........#..................#......#...##.........#...............#........
................#....#.#......#......#........#......#...#...#..................#.........#.........
..#.##.....#...........#...#.#....#..#......................................#....#...#..#...........
.#........#...........#...#.....................................#.........#...................#.....
........#...#..................................#.#...#..#....#.................#.......#..#.........
.#.....#..#......#..........#..............#............#.........#.#.#...#.#.......................
.#..#.........#.......................................................#..........#..#..........#....
.......#......#.....................................#....##.#.......#.........##.............#....#.
........#..............................#.#.....#........#...#...#....#................#..#......#..#
..#....................#.#..................#.#.#..................#........#..........#.....#......
................#...................................#.............#.......#.................#.......
#..............#.................................................................#.......#.....#....
................#....##.........#....#...#........#....#...........#................................
....#..#..........##....#.......#......................#......#........................#..#.........
.........#..#.#.................#............#............#.#.......#..............##..............#
...........#.......................#.................#....#........#.......................#....#...
...............#.......................#..#............#................#.........#.................
.#.......................#.....#..#.....#.......#.
................#.........#.......#.#.............
....................#.#...........#...............
..............#..#.................#..#...........
..................#....##............#..#.....##..
..##.#.........#.........#............#.........#.
................#.#........#........#.............
.#......#.#.................#...........#.........
......#...#...............#....###..#............#
...#.....#..........#....#...........#......#.#...
.....#.............#..............................
#.#.#...................#.....#..#.............#..
.........#.#............#..................#......
..........#.#.......#....#......#....#.......##...
...##.......#.#......#..##..##...................#
..#..........#....#.....................#.........
........#....#.....#...#..#.........#.#..........#
..........................#........#......#.......
............##.........................#..........
#..........#.......#........##.........##.#......#
............#....##.........#......##............#
....#.##............#..#....................#.....
.....#..............#..#..#......#................
..................#.........#................#....
.#............#................#.....#........#...
..............#...#..........................#...#
#..#...#..#..........#...#........................
.....#.......#.....#.......#..................#...
.#.........#........................#......#......
...#.....##..........#.......#....................
#......#.................................#........
......#.........................#.............#...
......................#.....#...#.........#.......
.....#....#.........#........#...##..............#
......#..............#......#..........#..........
.........#.#.....#..#..#......#.....##.........#..
#...#...#..............##.........#....#..........
.......#...#.....#.......................#........
.........#....#......#................#....#......
##...#......................#.....................
........#......##....#.......#......#......##.....
..#....#.....#.##............#.....#..............
..#....#..............#.........#..#.......#......
.....#.#....#......#........#.#.......#..........#
..#.......##......#......#........................
.#......#........#.........#........#.#...........
..#...............#.#..##..................#.#....
........###................#.............#........
............###.......#...........#.#.....#....##.
................#...............#.......#.#.#...#.";

//const INPUT: &str = MYINPUT;
const INPUT: &str = INPUTEX;
const side_len:u32= 4;
//const side_len:u32 = 50;

fn main() {
    App::new()
        .add_plugins(DefaultPlugins.set(ImagePlugin::default_nearest()))
        .add_plugins(WorldInspectorPlugin::new())
        .add_systems(Startup, setup)
        .add_systems(Update, (key_input2, (key_player, place_player).chain(), key_camera, draw_example_collection))
        .run();
}

#[derive(Clone, Debug)]
struct CubeSide {
    i: i32,
    j: i32,
    img: RgbImage,
}

#[derive(Default)]
#[derive(Component)]
enum Parent {
    #[default]
    None,
    Up,
    Down,
    Left,
    Right,
}

#[derive(Default)]
#[derive(Clone)]
enum Dir {
    Up, Down, Left,
    #[default]
    Right
}

#[derive(Clone)]
enum RotDir {
    Clock,
    CounterClock,
}

#[derive(Clone)]
enum Action {
    Rot(RotDir),
    Step(u32),
}

#[derive(Default)]
#[derive(Component)]
struct Player {
    direction: Dir,
    i: f32,
    j: f32,
    actions: Vec<Action>,
}

#[derive(Debug)]
struct CubeSideRecurse {
    data: CubeSide,
    up: Option<Box<CubeSideRecurse>>,
    down: Option<Box<CubeSideRecurse>>,
    left: Option<Box<CubeSideRecurse>>,
    right: Option<Box<CubeSideRecurse>>,
}

#[derive(Component)]
struct CameraMarker;

fn is_filled(img: &RgbImage, i: u32, j: u32) -> Option<RgbImage> {
    let subimg = image::imageops::crop_imm(img, j * side_len, i * side_len, side_len, side_len);
    let img = subimg.to_image();
    for pix in img.pixels() {
        if pix.0[0] != 0 || pix.0[1] != 0 || pix.0[2] != 0 {
            return Some(img);
        }
    }
    None
}

fn cube_find(flat: &[CubeSide], i: i32, j: i32) -> Option<i32> {
    if i < 0 || j < 0 {
        return None;
    }
    for (u, f) in flat.iter().enumerate() {
        if f.i == i && f.j == j {
            return Some(u.try_into().unwrap());
        }
    }
    None
}

fn cube_side_recuse2(flat: &mut Vec<CubeSide>, i: i32, j: i32) -> Option<Box<CubeSideRecurse>> {
    if let Some(u) = cube_find(flat, i, j) {
        return cube_side_recuse(flat, u);
    }
    None
}

fn cube_side_recuse(flat: &mut Vec<CubeSide>, u: i32) -> Option<Box<CubeSideRecurse>> {
    if flat.is_empty() || u < 0 {
        return None;
    }
    let data = flat.remove(u.try_into().unwrap());
    Some(Box::new(CubeSideRecurse {
        data: data.clone(),
        up: cube_side_recuse2(flat, data.i - 1, data.j),
        down: cube_side_recuse2(flat, data.i + 1, data.j),
        left: cube_side_recuse2(flat, data.i, data.j - 1),
        right: cube_side_recuse2(flat, data.i, data.j + 1),
    }))
}

fn cube_from_str(input: &str) -> Option<Box<CubeSideRecurse>> {
    let max_faces = 5;
    let max_width = side_len * max_faces;
    let mut x = 0;
    let mut y = 0;
    let mut img = RgbImage::new(max_width, max_width);
    for i in input.chars() {
        match i {
            ' ' => {
                img.put_pixel(x, y, Rgb([0, 0, 0]));
                x += 1;
            }
            '.' => {
                img.put_pixel(x, y, Rgb([255, 0, 0]));
                x += 1;
            }
            '#' => {
                img.put_pixel(x, y, Rgb([0, 255, 0]));
                x += 1;
            }
            '\n' => {
                y += 1;
                x = 0;
            }
            c => {
                panic!("unexpected char '{}'", c);
            }
        }
    }

    let mut sides = vec![];
    for i in 0..5 {
        for j in 0..5 {
            if let Some(img) = is_filled(&img, i, j) {
                sides.push(CubeSide {
                    i: i.try_into().unwrap(),
                    j: j.try_into().unwrap(),
                    img,
                });
            }
        }
    }

    cube_side_recuse(&mut sides, 0)
}

fn recurse_spawn(
    commands: &mut Commands,
    asset_server: &mut Res<AssetServer>,
    meshes: &mut ResMut<Assets<Mesh>>,
    materials: &mut ResMut<Assets<StandardMaterial>>,
    cube: Option<Box<CubeSideRecurse>>,
    parent: Parent,
) -> Option<Entity> {
    match cube {
        None => None,
        Some(cube) => {
            let quad_handle = meshes.add(Rectangle::new(1.0, 1.0));
            let _ = cube.data.img.save(format!(
                "assets/generated{}{}.png",
                cube.data.i, cube.data.j
            ));
            let texture_handle =
                asset_server.load(format!("generated{}{}.png", cube.data.i, cube.data.j));
            let material_handle = materials.add(StandardMaterial {
                base_color_texture: Some(texture_handle.clone()),
                alpha_mode: AlphaMode::Blend,
                cull_mode: None,
                double_sided: true,
                unlit: true,
                ..default()
            });
            let transform = match parent {
                Parent::None => Transform::from_xyz(0.0, 0.5, 0.5),
                Parent::Up => Transform::from_xyz(0.0, 1.0, 0.0),
                Parent::Down => Transform::from_xyz(0.0, -1.0, 0.0),
                Parent::Left => Transform::from_xyz(-1.0, 0.0, 0.0),
                Parent::Right => Transform::from_xyz(1.0, 0.0, 0.0),
            };
            let side = commands
                .spawn((
                    parent,
                    PbrBundle {
                        mesh: quad_handle.clone(),
                        material: material_handle.clone(),
                        transform,
                        ..default()
                    },
                ))
                .id();

            if let Some(a_u) = recurse_spawn(
                commands,
                asset_server,
                meshes,
                materials,
                cube.up,
                Parent::Up,
            ) {
                commands.entity(side).add_child(a_u);
            }
            if let Some(a_d) = recurse_spawn(
                commands,
                asset_server,
                meshes,
                materials,
                cube.down,
                Parent::Down,
            ) {
                commands.entity(side).add_child(a_d);
            }
            if let Some(a_l) = recurse_spawn(
                commands,
                asset_server,
                meshes,
                materials,
                cube.left,
                Parent::Left,
            ) {
                commands.entity(side).add_child(a_l);
            }
            if let Some(a_r) = recurse_spawn(
                commands,
                asset_server,
                meshes,
                materials,
                cube.right,
                Parent::Right,
            ) {
                commands.entity(side).add_child(a_r);
            }
            Some(side)
        }
    }
}

fn setup(
    mut commands: Commands,
    mut asset_server: Res<AssetServer>,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
) {
    let cube = cube_from_str(INPUT);
    recurse_spawn(
        &mut commands,
        &mut asset_server,
        &mut meshes,
        &mut materials,
        cube,
        Parent::None,
    );
    let material_handle = materials.add(StandardMaterial {
        alpha_mode: AlphaMode::Blend,
        unlit: true,
        ..default()
    });
    let quad_handle = meshes.add(Cone::default());
    let side_lenf = side_len as f32;
    let mut transform = Transform::from_xyz(-0.5, 1.0, 0.5+1.0/side_lenf).with_scale(Vec3{x:1.0/side_lenf,y:1.0/side_lenf,z:1.0/side_lenf});
    transform.rotate_local_z(-PI/2.0);
    commands.spawn((
                Player{i:0.0, j:0.0, direction: Dir::Right, actions:actions.to_vec()},
                PbrBundle {
                    mesh: quad_handle.clone(),
                    material: material_handle.clone(),
                    transform,
                    ..default()
                },
        ));
    commands.spawn((
        CameraMarker,
        Camera3dBundle {
            transform: Transform::from_xyz(0.0, 0.0, 15.0).looking_at(Vec3::ZERO, Vec3::Y),
            ..default()
        },
    ));
}

fn key_input2(
    mut sides: Query<(&mut Transform, &mut Parent), With<Parent>>,
    keys: Res<ButtonInput<KeyCode>>,
) {
    for mut stuff in &mut sides {
        let side = &mut stuff.0;
        let marker = stuff.1;
        match *marker {
            Parent::None => {}
            Parent::Up => {
                todo!("uP was not possible due to no test case ");
            }
            Parent::Down => {
                if keys.just_pressed(KeyCode::KeyA) {
                    side.rotate_around(
                        Vec3 {
                            x: 0.0,
                            y: -0.5,
                            z: 0.0,
                        },
                        Quat::from_axis_angle(Vec3::X, PI/12.0),
                    );
                } else if keys.just_pressed(KeyCode::KeyD) {
                    side.rotate_around(
                        Vec3 {
                            x: 0.0,
                            y: -0.5,
                            z: 0.0,
                        },
                        Quat::from_axis_angle(Vec3::X, -PI/12.0),
                    );
                }
            }
            Parent::Left => {
                if keys.just_pressed(KeyCode::KeyA) {
                    side.rotate_around(
                        Vec3 {
                            x: -0.5,
                            y: 0.0,
                            z: 0.0,
                        },
                        Quat::from_axis_angle(Vec3::Y, -PI/12.0),
                    );
                } else if keys.just_pressed(KeyCode::KeyD) {
                    side.rotate_around(
                        Vec3 {
                            x: -0.5,
                            y: 0.0,
                            z: 0.0,
                        },
                        Quat::from_axis_angle(Vec3::Y, PI/12.0),
                    );
                }
            }
            Parent::Right => {
                if keys.just_pressed(KeyCode::KeyA) {
                    side.rotate_around(
                        Vec3 {
                            x: 0.5,
                            y: 0.0,
                            z: 0.0,
                        },
                        Quat::from_axis_angle(Vec3::Y, PI/12.0),
                    );
                } else if keys.just_pressed(KeyCode::KeyD) {
                    side.rotate_around(
                        Vec3 {
                            x: 0.5,
                            y: 0.0,
                            z: 0.0,
                        },
                        Quat::from_axis_angle(Vec3::Y, -PI/12.0),
                    );
                }
            }
        }
    }
}

fn place_player(
    mut player_transform: Query<(&mut Transform, &mut Player), With<Player>>,
) {
    let mut pl = player_transform.single_mut();
    let side_lenf = side_len as f32;

    pl.0.translation.x = pl.1.j /side_lenf - 0.5 + 1.0 / side_lenf / 2.0;
    pl.0.translation.y = pl.1.i /side_lenf + 1.0 - 1.0 / side_lenf / 2.0;
        //pl.0.rotate_local_z(PI/2.0);
}

fn key_player(
    mut player: Query<(&mut Player, &mut Transform)>,
    keys: Res<ButtonInput<KeyCode>>,
) {
    let mut pl = player.single_mut();

    if keys.just_pressed(KeyCode::Space) {
        match &pl.0.direction {
            Dir::Up => {
                pl.0.i += 1.0;
            },
            Dir::Down => {
                pl.0.i -= 1.0;
            },
            Dir::Right => {
                pl.0.j += 1.0;
            },
            Dir::Left => {
                pl.0.j -= 1.0;
            },
        }
    }
    if keys.just_pressed(KeyCode::KeyJ) {
        pl.1.rotate_local_z(PI/2.0);
        match &pl.0.direction {
            Dir::Up => {
                pl.0.direction = Dir::Left;
            },
            Dir::Down => {
                pl.0.direction = Dir::Right;
            },
            Dir::Right => {
                pl.0.direction = Dir::Up;
            },
            Dir::Left => {
                pl.0.direction = Dir::Down;
            },
        }
    }
    if keys.just_pressed(KeyCode::KeyK) {
        pl.1.rotate_local_z(-PI/2.0);
        match &pl.0.direction {
            Dir::Up => {
                pl.0.direction = Dir::Right;
            },
            Dir::Down => {
                pl.0.direction = Dir::Left;
            },
            Dir::Right => {
                pl.0.direction = Dir::Down;
            },
            Dir::Left => {
                pl.0.direction = Dir::Up;
            },
        }
    }
}

fn key_camera(
    mut camera_transform: Query<&mut Transform, With<CameraMarker>>,
    keys: Res<ButtonInput<KeyCode>>,
) {
    let mut transform = camera_transform.single_mut();
    let local_x = transform.local_x().as_vec3().normalize_or_zero();
    let local_y = transform.local_y().as_vec3().normalize_or_zero();
    let local_z = transform.local_z().as_vec3().normalize_or_zero();
    if keys.pressed(KeyCode::ArrowUp) && local_z.y > -0.9 {
        transform.translate_around(Vec3::ZERO, Quat::from_axis_angle(local_x, 0.05));
    } else if keys.pressed(KeyCode::ArrowDown) && local_z.y < 0.9 {
        transform.translate_around(Vec3::ZERO, Quat::from_axis_angle(local_x, -0.05));
    }
    if keys.pressed(KeyCode::ArrowRight) {
        transform.translate_around(Vec3::ZERO, Quat::from_axis_angle(local_y, 0.05));
    } else if keys.pressed(KeyCode::ArrowLeft) {
        transform.translate_around(Vec3::ZERO, Quat::from_axis_angle(local_y, -0.05));
    }
    if keys.pressed(KeyCode::PageUp) {
        transform.translation = (transform.translation.length() + 0.5).clamp(1.0, 100.0) * local_z;
    } else if keys.pressed(KeyCode::PageDown) {
        transform.translation = (transform.translation.length() - 0.5).clamp(1.0, 100.0) * local_z;
    }
    transform.look_at(Vec3::ZERO, Vec3::Y);
}

fn draw_example_collection(mut gizmos: Gizmos) {
    gizmos.grid(
        Vec3::ZERO,
        Quat::from_rotation_x(PI / 2.),
        UVec2::splat(20),
        Vec2::new(2., 2.),
        LinearRgba::gray(0.65),
    );
    gizmos.cuboid(
        Transform::from_translation(Vec3::Y * 0.5).with_scale(Vec3::splat(1.0)),
        YELLOW,
    );
    gizmos.arrow(Vec3::ZERO, Vec3::X, RED);
    gizmos.arrow(Vec3::ZERO, Vec3::Y, GREEN);
    gizmos.arrow(Vec3::ZERO, Vec3::Z, BLUE);
}
