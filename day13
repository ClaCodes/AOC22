#!/usr/bin/awk -f
BEGIN {
    line = 0
    FS = ""
    cwd[0] = "/"
    depth = 1
    verbose = 0
    D2["/0"] = "l"
    D2["/0/0"] = "l"
    D2["/0/0/0"] = 2
    D6["/0"] = "l"
    D6["/0/0"] = "l"
    D6["/0/0/0"] = 6
}

function cwdstr() {
    sad = ""
    #print "cwdstr "
    for (u = 0; u < depth; u++) { sad = sad cwd[u] }

    return sad
}

!/^$/ {
    delete el
    delete ind
    depth = 1

    for (i = 0; i < NF; i++) {
        c = $(i + 1)
        #print "parsing " c
        if (c == "[") {
            addr = cwdstr() sprintf("%d", ind[depth])
            cwd[depth] = sprintf("%d", ind[depth]) "/"
            ind[depth]++
            depth++
            ind[depth] = 0
            list_marker = "l"
            el[addr] = list_marker
            #print "added " list_marker " at addr " addr
        }
        else if (c == "]") {
            if (s != "") {
                addr = cwdstr() sprintf("%d", ind[depth])
                el[addr] = s
                #print "added " s " at addr " addr
                s = ""
                ind[depth]++
            }

            #print "going outside " cwdstr()

            delete cwd[depth]
            depth--
            #print "should be outside:::::::::::::" cwdstr()
        }
        else if (c == ",") {
            if (s != "") {
                addr = cwdstr() sprintf("%d", ind[depth])
                el[addr] = s
                #print "added " s " at addr " addr
                s = ""
                ind[depth]++
            }
        }
        else { s = s c }
    }

    if (verbose == 1) { print $0 }

    delete A
    delete B

    for (i in el) { A[i] = el[i] }

    for (i in D2) { B[i] = D2[i] }

    order = right_order("")

    if (order < 0) {
        if (verbose == 1) print "bigger then divider 2"
    }
    else if (order > 0) {
        if (verbose == 1) print "less then divider 2"

        solution2++
    }
    else { print "ERROR" }

    for (i in D6) { B[i] = D6[i] }

    order = right_order("")

    if (order < 0) {
        if (verbose == 1) print "bigger then divider 6"
    }
    else if (order > 0) {
        if (verbose == 1) print "less then divider 6"

        solution6++
    }
    else { print "ERROR" }

    for (i in el) {
        if (line == 0) { IA[i] = el[i] }

        if (line == 1) { IB[i] = el[i] }
    }

    line++
}

function right_order(base) {
    counter[base] = 0

    while (1) {
        next_item = base "/" sprintf("%d", counter[base])

        if (verbose == 1) print "next item " next_item

        if (!A[next_item] && !B[next_item]) {
            if (verbose == 1) print "both ran out of items"

            return 0
        }

        if (!A[next_item]) {
            if (verbose == 1) print "A ran out of items first"

            return 1
        }

        if (!B[next_item]) {
            if (verbose == 1) print "B ran out of items first"

            return -1
        }

        order = 0

        if (verbose == 1)
            print "comparing A=" A[next_item] " with B=" B[next_item]

        if (A[next_item] == "l" && B[next_item] == "l") {
            order = right_order(next_item)
        }
        else if (A[next_item] == "l") {
            temp = B[next_item]
            B[next_item] = "l"
            B[next_item "/" sprintf("%d", 0)] = temp
            order = right_order(next_item)
        }
        else if (B[next_item] == "l") {
            temp = A[next_item]
            A[next_item] = "l"
            A[next_item "/" sprintf("%d", 0)] = temp
            order = right_order(next_item)
        }

        if (order != 0) return order

        a = int(A[next_item])
        b = int(B[next_item])

        if (a == b) {}
        else if (a < b) {
            if (verbose == 1) print "A is smaller then B"

            return 1
        }
        else {
            if (verbose == 1) print "B is smaller then A"

            return -1
        }

        counter[base]++
    }

    return 0
}

/^$/ {
    line = 0
    delete A
    delete B

    for (i in IA) { A[i] = IA[i] }

    for (i in IB) { B[i] = IB[i] }

    pair++
    order = right_order("")

    if (order < 0) {
        if (verbose == 1) print "not in the right order"
    }
    else if (order > 0) {
        solution += pair

        if (verbose == 1) print "in the right order"
    }
    else { print "ERROR" }

    if (verbose == 1) print "\n\n"

    #    for (i in A) { print "A   " i ":" A[i] }
    #
    #    for (i in B) { print "B   " i ":" B[i] }

    delete IA
    delete IB
}

END {
    if (verbose == 1) {
        print solution2 + 1 "    " solution6 + 2 " sol "

        (solution2 + 1) * (solution6 + 2)
    }
    else { print solution "\n" (solution2 + 1) * (solution6 + 2) }
}
